"""
Django settings for laser_slicer project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

import dj_database_url


def get_env(var, default=None):
    """
    Get an environment variable, or raise an error if not found.
    If a default value is provided, return that instead.
    """
    val = os.environ.get(var)
    if val is not None:
        return val
    if default is not None:
        return default
    raise RuntimeError(f"Missing required env var: {var}")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Core Django settings

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env("DJANGO_SECRET_KEY", "dev-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env("DJANGO_DEBUG", "False").lower() == "true"

ALLOWED_HOSTS = get_env("DJANGO_ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")


# Security settings
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 3600
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True


# Directories for storing elevation files and cache

TILE_CACHE_DIR = Path(get_env("TILE_CACHE_DIR", BASE_DIR / "data" / "srtm_cache"))
DEBUG_IMAGE_PATH = Path(get_env("DEBUG_IMAGE_PATH", BASE_DIR / "data" / "debug_images"))
SVG_TMP_DIR = Path(get_env("SVG_TMP_DIR", BASE_DIR / "tmp" / "svg_tmp"))
NOMINATIM_USER_AGENT = get_env("USER_AGENT", "laser-slicer/1.0 (contact@email.com)")

MEDIA_URL = "/media/"
MEDIA_ROOT = Path(get_env("MEDIA_ROOT", BASE_DIR / "media"))


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",  # Django REST framework for API development
    "core",  # Custom app for core functionality
    "django_extensions",
    "corsheaders",  # CORS headers for cross-origin requests
    "django_celery_results",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # CORS middleware
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOWED_ORIGINS = get_env(
    "DJANGO_CORS_ALLOWED_ORIGINS", "http://localhost:5173,http://localhost:4173"
).split(",")

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "core" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database configuration

# On Render, prefer DATABASE_URL and REDIS_URL
if "DATABASE_URL" in os.environ:
    DATABASES = {"default": dj_database_url.parse(os.environ["DATABASE_URL"])}
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": get_env("POSTGRES_DB", "laserslicer"),
            "USER": get_env("POSTGRES_USER", "laserslicer"),
            "PASSWORD": get_env("POSTGRES_PASSWORD", "laserslicer"),
            "HOST": get_env("POSTGRES_HOST", "localhost"),
            "PORT": get_env("POSTGRES_PORT", 5432),
        }
    }


# Celery configuration

CELERY_BROKER_URL = get_env(
    "CELERY_BROKER_URL",
    f"redis://{get_env('REDIS_HOST', 'localhost')}:{get_env('REDIS_PORT', '6379')}/0",
)
CELERY_RESULT_BACKEND = get_env(
    "CELERY_RESULT_BACKEND",
    f"redis://{get_env('REDIS_HOST', 'localhost')}:{get_env('REDIS_PORT', '6379')}/0",
)
CELERY_TASK_TIME_LIMIT = 900  # 15 min safety net
CELERY_TASK_SOFT_TIME_LIMIT = 840


# Logging configuration

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # Keep Django's default loggers
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {name} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "core": {  # Optional: your app-specific logger
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
